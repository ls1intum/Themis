Global Software control
===========================================

.. Global software control describes how the global software control is implemented. In particular, this section should describe how requests are initiated and how subsystems synchronize. This section should list and address synchronization and concurrency issues. This section is optional. It should be included if your system is event based, uses the observer pattern or includes a subsystem using push/pull notifications. For details refer to section 7.4.4 in Prof. Bruegge's book. 

The feedback suggestions that are generated by ThemisML are based on previous assessments. Because of this, ThemisML stores assessed submissions with their respective feedbacks. Therefore, ThemisML should always be notified whenever a new assessment is submitted, so that it can pull and store the new assessment in its own database. For this Themis uses the `/notify`_ route after an assessment was submitted, so that ThemisML can request the new assessment from the Artemis server. The alternative of checking for new assessments in a time interval was considered but decided against to reduce the strain on the Artemis server.

.. _`/notify`: https://github.com/ls1intum/Themis-ML/blob/d6cb72d971fffd053b9e3dd2ec0ec262235f4b95/feedback-suggestion/src/app/endpoints/feedback_suggestion_request.py#L29-L95